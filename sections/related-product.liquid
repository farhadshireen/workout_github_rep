<div class="related">
    <div class="page-width">
        <h1>You may like </h1>
        <div class="related-product">

        </div>
    </div>
</div>

{% if cart.item_count > 0 %}
    {% assign related_id = cart.items[0].product_id %}
{% else %}
    {% assign related_id = 8854741811516 %}
{% endif %}

<script>
   
// ---------------------------------------------------------------------------
// Money format handler
// ---------------------------------------------------------------------------
function formatMoney(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};
// function build
    function buildBlock(product){
        const formatedPrice = formatMoney(product.price, "{{ shop.money_format }}"); 
        const html =`
        <a class="related_products" href="${ product.url }">
        <img src="${ product.images[0] }">
        <h2>${ product.title }</h2>
        <h3>${ formatedPrice }</h3>
        </a>
        `
        return html  
    }
    fetch(window.Shopify.routes.root + "recommendations/products.json?product_id={{related_id}}&limit=4")
    .then(response => response.json())
    .then(({ products }) => {
        products.forEach(product => {
            const html = buildBlock(product);
            document.querySelector('.related-product').innerHTML += html;
        }); 
  }
);
</script>
{% schema %}
{
    "name": "Relate product",
    "settings": [
        
        ],
        "presets":[
            {
        "name":"Related product"
        }
        ]
}
{% endschema %}